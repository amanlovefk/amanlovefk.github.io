<?xml version="1.0" encoding="utf-8" standalone="yes"?><search><entry><title>Paxos Simple 阅读笔记</title><url>/post/seventh/</url><categories/><tags/><content type="html">问题定义 什么是共识算法（Consensus Algorithm）：
一个集合中的每个进程都能对某个变量的值作出提案。共识算法保证在提案（proposed）的值中只有一个被选中（chosen）。如果没有值被提出，那么就没有 值被选中。如果已经有值被选中了，那么进程能够学习（learn）到这个选中的值。
共识算法的活性要求（safety requirements）：
在提案的值中只有一个能被选中 仅选择一个值 一个进程只有在值被选中后才能知道这个被选中的值 活性要求保证了某个被提案的值最终会被选中，如果一个值别选中之后，一个进程最终能够学习到这个值。
Paxos 算法中包含三类角色，分别是：
proposers, 提案者：负责对变量的值进行提案 acceptors，接受者：负责对提案进行决策 —— 接受或者拒绝 learners，学习者：在值被选中之后，进行学习 在具体实现中，一个进程可能扮演多种角色。
假设进程之间可以通过消息进行通信。Paxos 使用常见的，异步的，非拜占庭（non-Byzantine）模型：
进程以任意速度运行，可能会因为由于崩溃而失败，可能重启。因为，进程完全有可能在一个值被选中后失败，然后重启，所以必须借助持久化存储来保存 一些决策信息。 消息会花费任意上的时间，可能会重复，可能会丢失，但是绝不可能被破坏。 如何选择一个值 单个 Acceptor 最简单的方法是只有一个acceptor。一个 proposer 发送一个提案（proposal）给 acceptor，acceptor 接受（accepted）第一个收到的提案。
只有一个 Acceptor，最显而易见的问题是：如果它挂掉了，那么共识就无法进行下去。
多个 Acceptor 很自然的，我们想到使用多个 Acceptor 来选择一个值。既然有多个 Acceptor，那么 Proposer 将提案发送给多个 Acceptor。只有当足够多 的Acceptor接受了某个值，那么它才算被选中了。这是多个 Acceptor 下的选择策略。那多少才足够呢？超过半数。1/3 行不行呢？如果有 1/3 的 Acceptor 选中了某个值，另外 2/3 选中了另外一个值，这样就选中两个值，不满足算法的活性要求。那么 1/2 行不行呢？也是同样的问题。如果超过半数，根据鸽笼原理， 不可能有两个大小超过半数而没有交集的集合选中不同的值。
假设我们共有 5 个Acceptor，分别为 S1, S2, S3, S4, S5. 其中：
S1, S2, S3 选中了值 v1 S2, S4, S5 选中了值 v2 集合 {S1, S2, S3} 和 {S2, S4, S5} 之间存在交集 {S2}。如果要达成共识，即 v1 = v2 的话，S2 只能选择一个值。
因为 S1, S3 和 S2 选择相同， S4, S5 和 S2 选择相同，所以 Acceptor 之间达成了共识。
假如没有失败和消息丢失，在一个 Proposer 的情况下，并且该 Proposer 只提出了一个提案，那么这个提案应该被接受并选中。这意味着满足下面的要求：
P1. 一个 Acceptor 必须接受它收到的第一个提案 但是这个要求会导致一个问题。假设几个proposer各自提案了不同的值，导致每个acceptor都接受了一个值，但是没有一个值被大多数acceptor所接受。
P1 和 一个值被选中当且仅当被多数acceptor接受要求 acceptor 必须能够接受多个提案。这个结论看着很简单，却不是那么自然地容易得出。为什么 acceptor 只接受一个提案就不能形成共识呢？前面提到，形成共识的前提是两个多数的交集接受了同一个值。
假设我们共有 5 个Acceptor，分别为 S1, S2, S3, S4, S5. 其中：
S1, S2, S3 选中了值 v1 S2, S4, S5 选中了值 v2 加入 S2 先接受了 v1, 那么 S1, S2, S3 接受了 v1, S4 和 S5 接受了 v2，v1 被多数接受，这不是形成了共识了吗？但如果 S2 挂掉，剩下的 S1, S3 与 S4, S5 分别接收了 v1 和 v2, 此时又形成了分裂。这种情况下不能形成共识。
我们已经通过例子证明了接受单个提案容易导致单点故障，那么不妨让acceptor能够接收多个提案。
“多个提案”，acceptor 如何知道收到的两条消息是不同的提案呢？我们给提案附加一个编号，这样的话提案就由两个部分组成：
提案编号 提案的值 为了避免混淆，我们要求不同的提案必须有不同的编号。这里的不同是指不同的消息。提案的内涵得到了扩容，值被选中的条件也需要稍作调整。
一个值被选中当且仅当一个拥有该值的提案被大多数acceptor所接受。
在这种情况下，我们说提案（包含它的值）被选中。
我们允许多个提案被选中，但是保证所有被选中的提案都有相同的值。编号肯定有大小，现在保证对于某个proposer而言，后发出的提案的编号更大。 如果多个提案被选中，那么后面的提案编号更大，但是值确实和被选中的值相同。即满足：
P2. 如果一个值为 v 的提案被选中，那么每个更高编号的被选中的提案的值也是 v 为什么要限制“更大的编号”呢？“如果一个值为 v 的提案被选中，那么后面被选中的提案的值也是 v”，这样说行不行呢？这是一个疑问。
为了被选中，一个提案至少要被一个acceptor所接受。所以，为了满足 P2，我们必须满足：
P2^a 如果一个值为v的提案被选中之后，那么更大编号的由acceptor接收的提案的值也为 v. 有了 P2^a，我们仍然要满足 P1。假设一个提案被一个从未接受过任何提案的acceptor c 所接受。这时候一个新的 proposer 醒来了，发出了一个更大的 但是不同值的提案。P1 要求 c 接受这个提案，此时已经有多数接受了某个值，即已经有值被选中了，这样就违反了 P2^a。
为了同时满足 P1 和 P2^a，要求我们加强 P2^a 到 P2^b
P2^b 如果一个值为v的值已经被选中，那么任何更大的编号由proposer发出的提案的值都是v 因为一个提案是先由 proposer 发出，然后由 acceptor 接收，所以由 P2^b 可以满足 P2^a，间接满足 P2.
为了探索如何满足 P2^b，让我们考虑如何证明它成立。假设已经有编号为 m, 值为 v 的提案被选中，那么任何编号大于 m 的编号 n 的提案的值都是 v.
我们在 n 上面使用数据归纳法，我们可以证明在假设编号在 m..(n-1) 之间的提案都有值 v 的前提下证明满足 P2^b.
当编号为 m 的编号的提案被选中时，肯定有一个包含多数的集合 C，其中的 acceptor 都接受了它。</content></entry><entry><title>生命里平淡的一天</title><url>/post/sixth/</url><categories/><tags/><content type="html">昨晚我卸载了平时常逛的两个APP，因为上面的一些言论和人经常扰动我的情绪。今天，感觉还行。
现在是晚上的22点39分，外面车流声还是没有停歇的样子。星期五快要到来了，这几天的工作稍微有点麻烦，这样的时刻我经历过很多，那种细微的痛楚又被唤醒了。
今天有什么收获呢？在网上看到了一些很可爱的人，很想认识他们。我的最终目标也许是无障碍地与想结识的人往来。
今天足够美好了。我的内心宁静。</content></entry><entry><title>Paxos 算法资料整理</title><url>/post/fifth/</url><categories/><tags/><content type="html">Basic Paxos Paxos Made Simple - Leslie Lamport
帮助我们一步步推导出 Paxos 算法
Multi Paxos Implementing Replicated Logs with Paxos - Diego Ongaro
PPT的讲解视频
用paxos实现多副本日志系统&amp;ndash;basic paxos部分
用paxos实现多副本日志系统&amp;ndash;multi paxos部分</content></entry><entry><title>无题</title><url>/post/fourth/</url><categories/><tags/><content type="html">标题越短，事情越大。先这样开头。
我感到匮乏，原因在于我还没有构筑起自己的世界，我所接触到的都是商业社会的碎片。
我沉浸在网络中。那么日常涉及的那几个网站或APP的内容就变成了自己的精神饲料。我是被动地接收这些东西，任由它们进入毫不设防的精神世界。 或喜或悲，或以为知晓了真理，或者因为嫉妒而感到愤恨。
手机上的这些 APP 不用卸载，如果是真的不会接触的话，何必要删除呢？最好的办法是通过新的东西将他们替换掉。人不可能耳不听，目不视。用更好的东西来替代，来充满。是的， 有高下之分，辩证久了，似乎分不清好坏了。有时候，我们需要鲜明的态度。
如何构建自己的世界？
第一，做该做的事情。
第二，如何放松。
先把这本书看完吧</content></entry><entry><title>一些Windows下小工具推荐</title><url>/post/third/</url><categories/><tags/><content type="html">第三篇，我想来聊一下windows10环境下的好用的小工具。
Listary：文件搜索工具。速度非常快，搜索匹配度高。最近更新到 6.x 版本，界面升级了。双击 Ctrl 唤起。 uTools：应用启动工具。Alt + 空格键 唤起。再也不需要自己去桌面上找图标然后双击了。 WizTree：磁盘分析工具。分析非常快，以百分比的形式显示哪些文件夹和文件占用磁盘比例最大，让我们释放磁盘空间时有的放矢。 Sublime Text：文本编辑器。功能不是很强大，但是打开非常快。打字交互做得很好，适合作为普通文本编辑器。默认主题也很好看。 我最常用的就是这几个软件呢。东西不在多，也需要精，趁手即可。</content></entry><entry><title>Java 开发者的磁盘管理经验</title><url>/post/second/</url><categories/><tags/><content type="html">Hugo 有时候会有点问题，看不见 post.
今天我想来聊聊 Java 开发者的一些电脑存储管理的经验。
第一呢，是IDEA的 idea.properties 文件中的几个路径，比如插件存放的路径，索引的路径。这些都可以修改。如果使用默认配置的话，时间长了，C 盘很容易被占满。
第二个呢，是关于 Maven 的本地仓库。也不要放在 C 盘。IDEA 每次打开新的工程师会使用自己默认的 Maven 配置，我们可以新建一个打开项目的模板，在里面配置自己的Maven仓库位置和配置。
第三个，关于 JDK 版本的管理。我们可能会用到多个 JDK，从 1.6, 1.8, 11 到 17 等。可以用一个专门的文件夹来存放JDK。</content></entry><entry><title>About</title><url>/about/</url><categories/><tags/><content type="html">关于</content></entry><entry><title>未来的道路</title><url>/post/first/</url><categories/><tags/><content type="html">填写某些内容，触发部署。
Github pages 必须要使用公开仓库才可以。
目前的可行的道路：
读研 跳槽 变瘦 海量的阅读 提升肺活量 提升语言的丰富度 提升衣品 我现在在做什么？现在是2022年的12月，疫情开放期。多年以后，也许当我回顾那个感染高发的冬季，依然能够想起那种在压抑的环境下被困住的那种左右为难、无可排遣的感受。
这个周末我重新注册了 Github 账号，把 Hugo 的主题列表来来回回翻了好几遍，试了五六个，最后还是选了之前从某个博客上看到的这个比较简洁又不失美感的主题。搭好了 Github Pages Action 之后，我打算直接在 Github 自带的富文本编辑器上输出，形式对于我来说已经没有意义，回归纯文本。
当然这个周末我还干了另外一件失败的事情 ———— 在我的 Ubuntu 虚拟机中安装 K8S。一开始，我打算使用三台虚拟机，一主二从，后来因为磁盘不够，妥协到一主一从。在配置的过程中因为 kubenet 一直启动失败准备放弃，后面实在不甘心，了解到 minikube 可以快速搭建单节点的 K8S，然而，还是 kubenet 的问题，一直失败，搞得我异常烦躁。
我正事（上面列出的道理）一个都没干，在一个边缘的无用的东西上死磕，这也算是拖延症了吧。
在极度封闭的环境下，我和外界隔绝，而网络的刺激逐渐对我失效。睡梦里，静坐着，发呆着，我思考关于我的行为动机的根源。上面列出的任何一项，但凡坚持下去都很好。可是，我行动缓慢，我很痛苦。也许这是因为我被训练得像一条狗，要马上得到回应，否则就焦躁不安。
现在是晚上的 21:51 分，明天仍然要在危险中去公司上班。有时候，在工作日的间隙处，我感到无力，我竟然还在这里为了基本的生存浪费我的生命。中午到了，下班了，我难以行动，对于食物，对于闲暇，我太熟悉了，以至于失去鲜明的记忆。我被困在这里了，动弹不得。
这种困顿并不陌生，然而思考并不能直接帮助我脱离困境。
行动。具体的行动。每天都要行动。卓有成效的行动。
读研篇 先把高数搞清楚。
跳槽篇 先搞清楚需要准备哪些内容，然后逐个击破。
LeetCode 刷题不能停。
变瘦篇 提升精气神，从每天坚持居家锻炼10分钟开始。
我的目标是瘦到120斤。
阅读篇 该读什么？从实际出发，先从容易读的开始。那种大部头的就先放放吧，即使它们已经站在书架中看了我很久。现在就决定！要选那种与我当前境况应景的阅读。
明天晚上我要做什么？列出来。从最难的开始吧，即锻炼，然后是高数。</content></entry></search>